name: Code Quality Checks

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.changes.outputs.code }}
      tests: ${{ steps.changes.outputs.tests }}
      deps: ${{ steps.changes.outputs.deps }}
      config: ${{ steps.changes.outputs.config }}
      prisma: ${{ steps.changes.outputs.prisma }}
      e2e: ${{ steps.changes.outputs.e2e }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            code:
              - 'src/**/*.{ts,tsx,js,jsx}'
              - 'backoffice/src/**/*.{ts,tsx,js,jsx}'
              - '*.{ts,tsx,js,jsx}'
            tests:
              - 'test/**/*'
              - 'backoffice/test/**/*'
              - '**/*.test.{ts,tsx,js,jsx}'
              - '**/*.spec.{ts,tsx,js,jsx}'
            deps:
              - 'package.json'
              - 'package-lock.json'
              - 'backoffice/package.json'
              - 'backoffice/package-lock.json'
            config:
              - '*.config.{ts,js,mjs}'
              - 'backoffice/*.config.{ts,js,mjs}'
              - 'tsconfig.json'
              - 'backoffice/tsconfig.json'
              - '.eslintrc*'
              - 'eslint.config.*'
              - 'backoffice/eslint.config.*'
            prisma:
              - 'prisma/**/*'
              - 'backoffice/prisma/**/*'
            e2e:
              - 'test/e2e/**/*'
              - 'playwright.config.ts'

  quality-checks:
    name: Code Quality & Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true' || needs.changes.outputs.tests == 'true' || needs.changes.outputs.deps == 'true' || needs.changes.outputs.config == 'true' || needs.changes.outputs.prisma == 'true'
    environment: ${{ github.ref == 'refs/heads/main' && 'Production – safetap' || 'Preview – safetap' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: safetap_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache Prisma schema and types
        uses: actions/cache@v4
        with:
          path: |
            node_modules/.prisma
            prisma/generated
          key: prisma-${{ hashFiles('prisma/schema.prisma', 'package-lock.json') }}

      - name: Cache TypeScript build info
        uses: actions/cache@v4
        with:
          path: |
            **/*.tsbuildinfo
            .next/cache
          key: ts-build-${{ hashFiles('**/*.ts', '**/*.tsx', 'tsconfig.json') }}-${{ github.sha }}
          restore-keys: |
            ts-build-${{ hashFiles('**/*.ts', '**/*.tsx', 'tsconfig.json') }}-
            ts-build-

      - name: Install dependencies
        if: needs.changes.outputs.deps == 'true' || needs.changes.outputs.code == 'true' || needs.changes.outputs.config == 'true'
        run: npm ci

      - name: Restore dependencies from cache
        if: needs.changes.outputs.deps != 'true'
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: deps-${{ hashFiles('package-lock.json') }}
          restore-keys: deps-

      - name: Ensure Rollup native binary (Linux x64)
        if: runner.os == 'Linux'
        run: |
          node -e "try{require('@rollup/rollup-linux-x64-gnu');console.log('OK: rollup native present')}catch(e){process.exit(1)}" \
          || npm i @rollup/rollup-linux-x64-gnu@^4.50.0 --no-save

      - name: Setup Prisma
        if: needs.changes.outputs.prisma == 'true' || needs.changes.outputs.config == 'true'
        run: npx prisma generate

      - name: Apply database migrations
        run: |
          while ! pg_isready -h localhost -p 5432; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}
          DIRECT_URL: ${{ secrets.DIRECT_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}

      - name: Type check
        if: needs.changes.outputs.code == 'true' || needs.changes.outputs.config == 'true'
        run: npm run type-check

      - name: Lint check
        if: needs.changes.outputs.code == 'true' || needs.changes.outputs.config == 'true'
        run: npm run lint:ci

      - name: Format check
        if: needs.changes.outputs.code == 'true' || needs.changes.outputs.config == 'true'
        run: npm run format:check

      - name: Run tests
        if: needs.changes.outputs.tests == 'true' || needs.changes.outputs.code == 'true' || needs.changes.outputs.config == 'true'
        run: npm run test

      - name: Build application
        run: npm run build:vercel
        env:
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'fallback-secret-for-ci-testing-only' }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL || 'http://localhost:3000' }}
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}
          DIRECT_URL: ${{ secrets.DIRECT_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}
          EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST || 'smtp.example.com' }}
          EMAIL_SERVER_USER: ${{ secrets.EMAIL_SERVER_USER || 'test@example.com' }}
          EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD || 'testpassword' }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM || 'Test <test@example.com>' }}

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [changes, quality-checks]
    if: needs.changes.outputs.e2e == 'true' || needs.changes.outputs.code == 'true'
    environment: ${{ github.ref == 'refs/heads/main' && 'Production – safetap' || 'Preview – safetap' }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: safetap_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Restore dependencies from cache
        id: cache-deps
        uses: actions/cache/restore@v4
        with:
          path: node_modules
          key: deps-${{ hashFiles('package-lock.json') }}
          restore-keys: deps-

      - name: Install dependencies if not cached
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

      - name: Ensure Rollup native binary (Linux x64)
        if: runner.os == 'Linux'
        run: |
          node -e "try{require('@rollup/rollup-linux-x64-gnu');console.log('OK: rollup native present')}catch(e){process.exit(1)}" \
          || npm i @rollup/rollup-linux-x64-gnu@^4.50.0 --no-save

      - name: Cache Playwright browsers
        id: cache-playwright
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ hashFiles('package-lock.json') }}

      - name: Install Playwright browsers
        if: steps.cache-playwright.outputs.cache-hit != 'true' || needs.changes.outputs.e2e == 'true'
        run: npx playwright install chromium --with-deps

      - name: Setup Prisma
        run: npx prisma generate

      - name: Apply database migrations
        run: |
          while ! pg_isready -h localhost -p 5432; do
            echo 'Waiting for PostgreSQL...'
            sleep 2
          done
          npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}
          DIRECT_URL: ${{ secrets.DIRECT_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}

      - name: Build application
        run: npm run build:vercel
        env:
          PLAYWRIGHT_TEST: 'true'
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'fallback-secret-for-ci-testing-only' }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL || 'http://localhost:3000' }}
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}
          DIRECT_URL: ${{ secrets.DIRECT_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}
          EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST || 'smtp.example.com' }}
          EMAIL_SERVER_USER: ${{ secrets.EMAIL_SERVER_USER || 'test@example.com' }}
          EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD || 'testpassword' }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM || 'Test <test@example.com>' }}
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Run Playwright tests (skip mobile optimization)
        run: npm run e2e:ci
        env:
          PLAYWRIGHT_TEST: 'true'
          CI: 'true'
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET || 'fallback-secret-for-ci-testing-only' }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL || 'http://localhost:3000' }}
          DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/safetap_test' }}
          EMAIL_SERVER_HOST: ${{ secrets.EMAIL_SERVER_HOST || 'smtp.example.com' }}
          EMAIL_SERVER_USER: ${{ secrets.EMAIL_SERVER_USER || 'test@example.com' }}
          EMAIL_SERVER_PASSWORD: ${{ secrets.EMAIL_SERVER_PASSWORD || 'testpassword' }}
          EMAIL_FROM: ${{ secrets.EMAIL_FROM || 'Test <test@example.com>' }}
          NODE_OPTIONS: '--max-old-space-size=4096'

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
