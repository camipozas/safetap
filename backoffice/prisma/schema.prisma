generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model AdminInvitation {
  id        String    @id
  email     String
  role      Role
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime

  @@index([email, expiresAt])
}

model EmergencyContact {
  id               String           @id
  profileId        String
  name             String
  relation         String
  phone            String
  country          String?
  preferred        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  EmergencyProfile EmergencyProfile @relation(fields: [profileId], references: [id])

  @@index([profileId])
}

model EmergencyProfile {
  id               String             @id
  userId           String
  stickerId        String?            @unique
  bloodType        String?
  allergies        String[]
  conditions       String[]
  medications      String[]
  notes            String?
  language         String?
  organDonor       Boolean            @default(false)
  insurance        Json?
  consentPublic    Boolean            @default(true)
  updatedByUserAt  DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  EmergencyContact EmergencyContact[]
  Sticker          Sticker?           @relation(fields: [stickerId], references: [id])
  User             User               @relation(fields: [userId], references: [id])
  ProfileAccessLog ProfileAccessLog[]
}

model Payment {
  id             String        @id
  userId         String
  stickerId      String?
  amount         Int
  currency       String        @default("CLP")
  method         String        @default("BANK_TRANSFER")
  reference      String        @unique
  status         PaymentStatus @default(PENDING)
  receivedAt     DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  discountAmount Int?
  discountCodeId String?
  originalAmount Int?
  quantity       Int           @default(1)
  promotionId    String?
  Sticker        Sticker?      @relation(fields: [stickerId], references: [id])
  User           User          @relation(fields: [userId], references: [id])
  Promotion      Promotion?    @relation(fields: [promotionId], references: [id])

  @@index([userId, status])
  @@index([discountCodeId])
  @@index([promotionId])
}

model ProfileAccessLog {
  id               String           @id
  profileId        String
  via              AccessVia
  ip               String?
  userAgent        String?
  country          String?
  createdAt        DateTime         @default(now())
  EmergencyProfile EmergencyProfile @relation(fields: [profileId], references: [id])

  @@index([profileId, createdAt])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Sticker {
  id               String            @id
  slug             String            @unique
  serial           String            @unique
  ownerId          String
  nameOnSticker    String
  flagCode         String
  colorPresetId    String            @default("light-gray")
  stickerColor     String            @default("#f1f5f9")
  textColor        String            @default("#000000")
  status           StickerStatus     @default(ORDERED)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  groupId          String?
  EmergencyProfile EmergencyProfile?
  Payment          Payment[]
  User             User              @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
  @@index([groupId])
}

model StickerDesign {
  id            String   @id
  userId        String
  name          String
  nameOnSticker String
  flagCode      String
  colorPresetId String   @default("light-gray")
  stickerColor  String   @default("#f1f5f9")
  textColor     String   @default("#000000")
  isTemplate    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  User          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id                    String                @id
  email                 String                @unique
  name                  String?
  image                 String?
  country               String?
  role                  Role                  @default(USER)
  emailVerified         DateTime?
  totalSpent            Int                   @default(0)
  lastLoginAt           DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime
  accounts              Account[]
  createdDiscountCodes  DiscountCode[]
  discountRedemptions   DiscountRedemption[]
  promotionRedemptions  PromotionRedemption[]
  EmergencyProfile      EmergencyProfile[]
  Payment               Payment[]
  sessions              Session[]
  Sticker               Sticker[]
  StickerDesign         StickerDesign[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Promotion {
  id            String                @id @default(cuid())
  name          String
  description   String?
  minQuantity   Int
  discountType  PromotionType
  discountValue Decimal               @db.Decimal(10, 2)
  active        Boolean               @default(true)
  priority      Int                   @default(0)
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  payments      Payment[]
  redemptions   PromotionRedemption[]

  @@index([minQuantity, active])
  @@index([active, priority])
}

model DiscountCode {
  id              String               @id @default(cuid())
  code            String               @unique
  type            DiscountType
  amount          Decimal              @db.Decimal(10, 2)
  active          Boolean              @default(true)
  expiresAt       DateTime?
  maxRedemptions  Int?
  usageCount      Int                  @default(0)
  createdByUserId String?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  createdBy       User?                @relation(fields: [createdByUserId], references: [id])
  redemptions     DiscountRedemption[]

  @@index([code, active])
}

model DiscountRedemption {
  id             String       @id @default(cuid())
  discountCodeId String
  orderId        String?
  userId         String?
  redeemedAt     DateTime     @default(now())
  discountCode   DiscountCode @relation(fields: [discountCodeId], references: [id])
  user           User?        @relation(fields: [userId], references: [id])

  @@index([discountCodeId])
  @@index([userId])
}

model PromotionRedemption {
  id          String    @id @default(cuid())
  promotionId String
  userId      String?
  orderId     String?
  appliedAt   DateTime  @default(now())
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])

  @@index([promotionId])
  @@index([userId])
}

enum AccessVia {
  QR
  NFC
  DIRECT
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
  PAID
  CANCELLED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum StickerStatus {
  ORDERED
  PAID
  PRINTING
  SHIPPED
  ACTIVE
  LOST
}

enum DiscountType {
  PERCENT
  FIXED
}

enum PromotionType {
  PERCENTAGE
  FIXED
}
