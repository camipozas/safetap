// Prisma schema for Safetap MVP (Phase 1)
// PostgreSQL + Prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL") // comment just to use Prisma Data Platform's Accelerate
}

enum Role {
    USER
    ADMIN
    SUPER_ADMIN
}

enum StickerStatus {
    ORDERED
    PAID
    PRINTING
    SHIPPED
    ACTIVE
    LOST
}

enum AccessVia {
    QR
    NFC
    DIRECT
}

enum PaymentStatus {
    PENDING
    VERIFIED
    REJECTED
}

model User {
    id           String   @id @default(cuid())
    email        String   @unique
    name         String?
    image        String?
    country      String? // ISO-3166-1 alpha-2
    role         Role     @default(USER)
    emailVerified DateTime?
    totalSpent   Int      @default(0) // Total spent in cents
    lastLoginAt  DateTime?
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    stickers      Sticker[]
    profiles      EmergencyProfile[]
    payments      Payment[]
    accounts      Account[]
    sessions      Session[]
    stickerDesigns StickerDesign[]
}

model Sticker {
    id            String            @id @default(cuid())
    slug          String            @unique
    serial        String            @unique
    ownerId       String
    owner         User              @relation(fields: [ownerId], references: [id])
    nameOnSticker String
    flagCode      String
    colorPresetId String            @default("light-gray") // ID of the color preset
    stickerColor  String            @default("#f1f5f9") // Background color
    textColor     String            @default("#000000") // Text color
    status        StickerStatus     @default(ORDERED)
    // Link to profile (1:1). Opposite side defined in EmergencyProfile.sticker
    profile       EmergencyProfile?
    createdAt     DateTime          @default(now())
    updatedAt     DateTime          @updatedAt

    // payments relation
    payments Payment[]

    @@index([ownerId])
}

model EmergencyProfile {
    id              String    @id @default(cuid())
    userId          String
    user            User      @relation(fields: [userId], references: [id])
    // Relation to Sticker (1:1)
    stickerId       String?   @unique
    sticker         Sticker?  @relation(fields: [stickerId], references: [id])
    bloodType       String?
    allergies       String[]
    conditions      String[]
    medications     String[]
    notes           String?
    language        String?
    organDonor      Boolean   @default(false)
    insurance       Json?
    consentPublic   Boolean   @default(true)
    updatedByUserAt DateTime?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    contacts   EmergencyContact[]
    accessLogs ProfileAccessLog[]
}

model EmergencyContact {
    id        String           @id @default(cuid())
    profileId String
    profile   EmergencyProfile @relation(fields: [profileId], references: [id])
    name      String
    relation  String
    phone     String
    country   String?
    preferred Boolean          @default(false)
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt

    @@index([profileId])
}

model ProfileAccessLog {
    id        String           @id @default(cuid())
    profileId String
    profile   EmergencyProfile @relation(fields: [profileId], references: [id])
    via       AccessVia
    ip        String?
    userAgent String?
    country   String?
    createdAt DateTime         @default(now())

    @@index([profileId, createdAt])
}

model Payment {
    id          String        @id @default(cuid())
    userId      String
    user        User          @relation(fields: [userId], references: [id])
    stickerId   String?
    sticker     Sticker?      @relation(fields: [stickerId], references: [id])
    amountCents Int
    currency    String        @default("CLP")
    method      String        @default("BANK_TRANSFER")
    reference   String        @unique
    status      PaymentStatus @default(PENDING)
    receivedAt  DateTime?
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt

    @@index([userId, status])
}

// NextAuth models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model StickerDesign {
    id           String   @id @default(cuid())
    userId       String
    user         User     @relation(fields: [userId], references: [id])
    name         String   // User-defined name for the design
    nameOnSticker String  // Name to appear on sticker
    flagCode     String   // Country flag code
    colorPresetId String  @default("light-gray") // ID of the color preset
    stickerColor String   @default("#f1f5f9") // Background color
    textColor    String   @default("#000000") // Text color
    isTemplate   Boolean  @default(false) // If true, can be used by other users
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    @@index([userId])
}

model AdminInvitation {
    id        String   @id @default(cuid())
    email     String
    role      Role
    token     String   @unique
    expiresAt DateTime
    usedAt    DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email, expiresAt])
}
