generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model AdminInvitation {
  id        String    @id
  email     String
  role      Role
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime

  @@index([email, expiresAt])
}

model EmergencyContact {
  id               String           @id
  profileId        String
  name             String
  relation         String
  phone            String
  country          String?
  preferred        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  EmergencyProfile EmergencyProfile @relation(fields: [profileId], references: [id])

  @@index([profileId])
}

model EmergencyProfile {
  id               String             @id
  userId           String
  stickerId        String?            @unique
  bloodType        String?
  allergies        String[]
  conditions       String[]
  medications      String[]
  notes            String?
  language         String?
  organDonor       Boolean            @default(false)
  insurance        Json?
  consentPublic    Boolean            @default(true)
  updatedByUserAt  DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  EmergencyContact EmergencyContact[]
  Sticker          Sticker?           @relation(fields: [stickerId], references: [id])
  User             User               @relation(fields: [userId], references: [id])
  ProfileAccessLog ProfileAccessLog[]
}

model Payment {
  id         String        @id
  userId     String
  stickerId  String?
  amount     Int
  currency   String        @default("CLP")
  method     String        @default("BANK_TRANSFER")
  reference  String        @unique
  status     PaymentStatus @default(PENDING)
  receivedAt DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime
  Sticker    Sticker?      @relation(fields: [stickerId], references: [id])
  User       User          @relation(fields: [userId], references: [id])

  @@index([userId, status])
}

model ProfileAccessLog {
  id               String           @id
  profileId        String
  via              AccessVia
  ip               String?
  userAgent        String?
  country          String?
  createdAt        DateTime         @default(now())
  EmergencyProfile EmergencyProfile @relation(fields: [profileId], references: [id])

  @@index([profileId, createdAt])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Sticker {
  id               String            @id
  slug             String            @unique
  serial           String            @unique
  ownerId          String
  nameOnSticker    String
  flagCode         String
  colorPresetId    String            @default("light-gray")
  stickerColor     String            @default("#f1f5f9")
  textColor        String            @default("#000000")
  status           StickerStatus     @default(ORDERED)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime
  EmergencyProfile EmergencyProfile?
  Payment          Payment[]
  User             User              @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
}

model StickerDesign {
  id            String   @id
  userId        String
  name          String
  nameOnSticker String
  flagCode      String
  colorPresetId String   @default("light-gray")
  stickerColor  String   @default("#f1f5f9")
  textColor     String   @default("#000000")
  isTemplate    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  User          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id               String             @id
  email            String             @unique
  name             String?
  image            String?
  country          String?
  role             Role               @default(USER)
  emailVerified    DateTime?
  totalSpent       Int                @default(0)
  lastLoginAt      DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  accounts         Account[]
  EmergencyProfile EmergencyProfile[]
  Payment          Payment[]
  sessions         Session[]
  Sticker          Sticker[]
  StickerDesign    StickerDesign[]
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum AccessVia {
  QR
  NFC
  DIRECT
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
  TRANSFER_PAYMENT
  PAID
  TRANSFERRED
  CANCELLED
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum StickerStatus {
  ORDERED
  PAID
  PRINTING
  SHIPPED
  ACTIVE
  LOST
}
