generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String             @id @default(cuid())
  email          String             @unique
  name           String?
  image          String?
  country        String?
  role           Role               @default(USER)
  emailVerified  DateTime?
  totalSpent     Int                @default(0)
  lastLoginAt    DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  accounts       Account[]
  profiles       EmergencyProfile[]
  payments       Payment[]
  sessions       Session[]
  stickers       Sticker[]
  stickerDesigns StickerDesign[]
}

model Sticker {
  id            String            @id @default(cuid())
  slug          String            @unique
  serial        String            @unique
  ownerId       String
  nameOnSticker String
  flagCode      String
  colorPresetId String            @default("light-gray")
  stickerColor  String            @default("#f1f5f9")
  textColor     String            @default("#000000")
  status        StickerStatus     @default(ORDERED)
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  profile       EmergencyProfile?
  payments      Payment[]
  owner         User              @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
}

model EmergencyProfile {
  id              String             @id @default(cuid())
  userId          String
  stickerId       String?            @unique
  bloodType       String?
  allergies       String[]
  conditions      String[]
  medications     String[]
  notes           String?
  language        String?
  organDonor      Boolean            @default(false)
  insurance       Json?
  consentPublic   Boolean            @default(true)
  updatedByUserAt DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  contacts        EmergencyContact[]
  sticker         Sticker?           @relation(fields: [stickerId], references: [id])
  user            User               @relation(fields: [userId], references: [id])
  accessLogs      ProfileAccessLog[]
}

model EmergencyContact {
  id        String           @id @default(cuid())
  profileId String
  name      String
  relation  String
  phone     String
  country   String?
  preferred Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  profile   EmergencyProfile @relation(fields: [profileId], references: [id])

  @@index([profileId])
}

model ProfileAccessLog {
  id        String           @id @default(cuid())
  profileId String
  via       AccessVia
  ip        String?
  userAgent String?
  country   String?
  createdAt DateTime         @default(now())
  profile   EmergencyProfile @relation(fields: [profileId], references: [id])

  @@index([profileId, createdAt])
}

model Payment {
  id          String        @id @default(cuid())
  userId      String
  stickerId   String?
  amountCents Int
  currency    String        @default("CLP")
  method      String        @default("BANK_TRANSFER")
  reference   String        @unique
  status      PaymentStatus @default(PENDING)
  receivedAt  DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  sticker     Sticker?      @relation(fields: [stickerId], references: [id])
  user        User          @relation(fields: [userId], references: [id])

  @@index([userId, status])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StickerDesign {
  id            String   @id @default(cuid())
  userId        String
  name          String
  nameOnSticker String
  flagCode      String
  colorPresetId String   @default("light-gray")
  stickerColor  String   @default("#f1f5f9")
  textColor     String   @default("#000000")
  isTemplate    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum StickerStatus {
  ORDERED
  PAID
  PRINTING
  SHIPPED
  ACTIVE
  LOST
}

enum AccessVia {
  QR
  NFC
  DIRECT
}

enum PaymentStatus {
  PENDING
  VERIFIED
  REJECTED
}

model AdminInvitation {
    id        String   @id @default(cuid())
    email     String
    role      Role
    token     String   @unique
    expiresAt DateTime
    usedAt    DateTime?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email, expiresAt])
}
